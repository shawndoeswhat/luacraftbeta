---@meta
-- Auto-generated LuaCATS documentation
-- Generated by LuaDocGenerator for LuaCraftBeta

---@class Vector3
---@field x number @The X coordinate
---@field y number @The Y coordinate
---@field z number @The Z coordinate
Vector3 = {}

---@class storage
storage = {}

---@class mc
mc = {}

---@class LuaPlayer
local LuaPlayer = {}

---@class LuaWorld
local LuaWorld = {}

---@class LuaMaterial
local LuaMaterial = {}

---@class LuaItemStack
local LuaItemStack = {}

---@class LuaEntity
local LuaEntity = {}

---@class LuaBlock
local LuaBlock = {}

---@class MC_ACTION
---@field LEFT_CLICK_BLOCK string @Represents the LEFT_CLICK_BLOCK action
---@field RIGHT_CLICK_BLOCK string @Represents the RIGHT_CLICK_BLOCK action
---@field LEFT_CLICK_AIR string @Represents the LEFT_CLICK_AIR action
---@field RIGHT_CLICK_AIR string @Represents the RIGHT_CLICK_AIR action
---@field PHYSICAL string @Represents the PHYSICAL interaction
MC_ACTION = {}

---Prints a message to the server chat prefixed with [Lua].
---@param message string
function print(message) end

---Yields the coroutine for a number of seconds, then resumes.
---@param seconds number
function wait(seconds) end

---Creates a new 3D vector with x, y, z coordinates.
---@param x number
---@param y number
---@param z number
---@return Vector3 @A new vector object
function Vector3.new(x, y, z) end

---Saves a key-value pair to persistent storage. Tables are encoded as JSON.
---@param key string
---@param value string|table
function storage.applySaveData(key, value) end

---Retrieves previously saved data for the given key.
---@param key string
---@return string|table|nil @The stored value, or nil if not found
function storage.getSavedData(key) end

---Returns a world by its name.
---@param worldName string
---@return LuaWorld @LuaWorld table
function mc.getWorld(worldName) end

---Returns the LuaCraftBeta plugin version.
---@return string @Version string
function mc.getVersion() end

---Returns the LuaJ interpreter version.
---@return string @LuaJ version
function mc.getLuaJVersion() end

---Returns the number of loaded Lua scripts.
---@return number @Loaded script count
function mc.getLoadedScriptCount() end

---Spawns an entity in the given world at a position or a player's location.
---@param entityName string
---@param world LuaWorld|string
---@param target Vector3|string
---@return table @The spawned LuaEntity table
function mc.summon(entityName, world, target) end

---Returns all entities in the given world.
---@param world table
---@return table @Array of LuaEntity tables
function mc.getAllEntities(world) end

---Returns all entities of a given type from a world.
---@param world table
---@param entityType string
---@return table @Array of LuaEntity tables matching the given type
function mc.getEntitiesByType(world, entityType) end

---Gets a player by name if they are online. Returns a LuaPlayer or error table.
---@param name string
---@return LuaPlayer? @LuaPlayer object or error table if not found
function mc.getPlayer(name) end

---Returns a list of online players as LuaPlayer tables.
---@return LuaPlayer[] @Array of LuaPlayer objects
function mc.getOnlinePlayers() end

---Returns a material by its numeric ID.
---@param id integer
---@return table @LuaMaterial table if found, or an error message string
function mc.getMaterial(id) end

---Broadcasts a message to all players on the server.
---@param message string
function mc.broadcast(message) end

---Sends a private message to the specified player.
---@param playerName string
---@param message string
function mc.sendMessage(playerName, message) end

---Executes a command as the server or a specific player.
---@param command string
---@param playerName string|nil (optional)
---@return boolean @True if the command executed successfully, false otherwise
function mc.runCommand(command, playerName) end

---Returns the name of the player.
---@return string @The player's name
function LuaPlayer:getName() end

---Sends a message to the player.
---@param message string
function LuaPlayer:sendMessage(message) end

---Returns the direction the player is looking as a Vector3.
---@return Vector3 @Direction vector the player is facing
function LuaPlayer:getLookDirection() end

---Teleports the player to the given Vector3 position.
---@param position Vector3
function LuaPlayer:teleport(position) end

---Gets the player's current health.
---@return number @Current health value
function LuaPlayer:getHealth() end

---Sets the player's health, clamped between 0 and 20.
---@param health number
function LuaPlayer:setHealth(health) end

---Checks if the player is an operator.
---@return boolean @True if the player is op
function LuaPlayer:isOp() end

---Sets the player's operator status.
---@param value boolean
function LuaPlayer:setOp(value) end

---Kicks the player with the given reason.
---@param reason string
function LuaPlayer:kick(reason) end

---Returns the entity type name for compatibility with LuaEntity.
---@return string @Always returns 'player'
function LuaPlayer:getType() end

---Gets the item in the player's hand.
---@return LuaItemStack|nil @LuaItemStack table or nil if empty
function LuaPlayer:getItemInHand() end

---Sets the item in the player's hand.
---@param material string
---@param amount number
function LuaPlayer:setItemInHand(material, amount) end

---Gives the player an item.
---@param material string
---@param amount number
function LuaPlayer:giveItem(material, amount) end

---Returns the player's current position as a Vector3.
---@return Vector3 @Player position vector
function LuaPlayer:getLocation() end

---Gets the dimension name the player is currently in.
---@return string @Dimension name (overworld, nether, unknown)
function LuaPlayer:getDimension() end

---Gets the LuaWorld object the player is in.
---@return LuaWorld @The world the player is currently in
function LuaPlayer:getWorld() end

---Returns the player's current velocity as a Vector3.
---@return Vector3 @Velocity vector
function LuaPlayer:getVelocity() end

---Sets the player's velocity using a Vector3.
---@param velocity Vector3
function LuaPlayer:setVelocity(velocity) end

---Fully restores the player's health.
function LuaPlayer:heal() end

---Sets the player's health, clamped between 0 and 20.
---@param health number
function LuaPlayer:setHealth(health) end

---Returns the maximum health value for the player (always 20 in Beta).
---@return number @Maximum health value
function LuaPlayer:getMaxHealth() end

---Returns whether the player is alive (health > 0).
---@return boolean @True if the player is alive
function LuaPlayer:isAlive() end

---Damages the player by the given amount.
---@param amount number
function LuaPlayer:damage(amount) end

---Kills the player by setting their health to 0.
function LuaPlayer:kill() end

---Sets the number of fire ticks the player is burning.
---@param ticks number
function LuaPlayer:setFireTicks(ticks) end

---Sets the vector's coordinates.
---@param x number
---@param y number
---@param z number
function Vector3:set(x, y, z) end

---Returns a copy of this vector.
---@return Vector3 @Cloned vector
function Vector3:clone() end

---Returns the length (magnitude) of the vector.
---@return number @Length of the vector
function Vector3:length() end

---Normalizes this vector to a unit vector.
---@return Vector3 @Normalized vector
function Vector3:normalize() end

---Returns the name of the world.
---@return string @The name of the world
function LuaWorld:getName() end

---Gets the current time in the world.
---@return number @Current world time
function LuaWorld:getTime() end

---Sets the current time in the world.
---@param time number
function LuaWorld:setTime(time) end

---Returns whether the world is currently experiencing a storm.
---@return boolean @True if storming
function LuaWorld:hasStorm() end

---Enables or disables stormy weather in the world.
---@param value boolean
function LuaWorld:setStorm(value) end

---Strikes lightning at the given position.
---@param position Vector3
function LuaWorld:strikeLightning(position) end

---Creates an explosion at a location.
---@param position Vector3
---@param power number
function LuaWorld:createExplosion(position, power) end

---Returns the seed used to generate the world.
---@return number @World generation seed
function LuaWorld:getSeed() end

---Returns a list of players in this world.
---@return table @Array of LuaPlayer objects
function LuaWorld:getPlayers() end

---Returns all entities in the world.
---@return table @Array of LuaEntity objects
function LuaWorld:getEntities() end

---Sets a block at a given location to the specified type and optional data.
---@param position Vector3
---@param blockType string
---@param data number|nil
function LuaWorld:setBlock(position, blockType, data) end

---Returns the block at the given location. May return nil if the position is invalid or the block could not be resolved.
---@param position Vector3
---@return LuaBlock? @LuaBlock representing the block, or nil if invalid
function LuaWorld:getBlockAt(position) end

---Returns whether it is currently raining in the world.
---@return boolean @True if it is raining
function LuaWorld:isRaining() end

---Returns the dimension name the world represents.
---@return string @One of: 'overworld', 'nether', or 'unknown'
function LuaWorld:getDimension() end

---Gets the numeric ID of the material.
---@return number @The Bukkit material ID
function LuaMaterial:getId() end

---Returns the maximum stack size for this material.
---@return number
function LuaMaterial:getMaxStackSize() end

---Returns the max durability of the material.
---@return number
function LuaMaterial:getMaxDurability() end

---Gets the lowercase name of the material.
---@return string
function LuaMaterial:getName() end

---Returns true if this material is a placeable block.
---@return boolean
function LuaMaterial:isBlock() end

---Gets the type of the item as a lowercase string.
---@return string @The material type
function LuaItemStack:getType() end

---Sets the item type using a string name.
---@param materialName string
function LuaItemStack:setType(materialName) end

---Returns the number of items in the stack.
---@return number @The stack size
function LuaItemStack:getAmount() end

---Sets the number of items in the stack.
---@param amount number
function LuaItemStack:setAmount(amount) end

---Gets the durability value of the item.
---@return number @The durability value
function LuaItemStack:getDurability() end

---Sets the durability of the item.
---@param durability number
function LuaItemStack:setDurability(durability) end

---Returns data for the item if available (e.g., wool color).
---@return table|string @A table with data or a message if unavailable
function LuaItemStack:getData() end

---Sets data on the item, like color for wool blocks.
---@param data table
function LuaItemStack:setData(data) end

---Returns the entity type as a lowercase name.
---@return string @Entity type name
function LuaEntity:getType() end

---Returns the unique entity ID.
---@return number @Entity ID
function LuaEntity:getId() end

---Returns the name of the entity. If the entity is a player, this is their username. Otherwise, it falls back to the type name.
---@return string @The name or type name of the entity
function LuaEntity:getName() end

---Returns whether the entity is dead.
---@return boolean @True if dead
function LuaEntity:isDead() end

---Gets the entity's current velocity vector.
---@return Vector3 @Velocity vector
function LuaEntity:getVelocity() end

---Sets the entity's velocity.
---@param velocity Vector3
function LuaEntity:setVelocity(velocity) end

---Sets the fire ticks duration.
---@param ticks number
function LuaEntity:setFireTicks(ticks) end

---Teleports the entity using a Vector3 table.
---@param position Vector3
---@return nil @Always returns nil
function LuaEntity:teleport(position) end

---Returns the entity's current location.
---@return Vector3 @Entity position
function LuaEntity:getLocation() end

---Returns all entities in the chunk this entity is currently in.
---@return table @Array of LuaEntity tables
function LuaEntity:getEntitiesInChunk() end

---Returns whether the entity is empty (e.g. vehicle without passenger).
---@return boolean @True if empty
function LuaEntity:isEmpty() end

---Returns the world the entity is in.
---@return LuaWorld @The world the entity belongs to
function LuaEntity:getWorld() end

---Ejects any passenger from the entity.
---@return boolean @True if something was ejected
function LuaEntity:eject() end

---Removes the entity from the world.
function LuaEntity:remove() end

---Returns true if the entity is a player and they are an operator.
---@return boolean @True if the player is op; false otherwise
function LuaEntity:isOp() end

---Returns the current health of the entity if it's a living entity.
---@return number @Current health, or -1 if not a living entity
function LuaEntity:getHealth() end

---Returns the maximum health value for the entity. Always 20 for now.
---@return number @Max health (20)
function LuaEntity:getMaxHealth() end

---Returns true if the entity is a living entity and has health greater than 0.
---@return boolean @True if alive, false otherwise
function LuaEntity:isAlive() end

---Fully restores the entity's health to 20, if it's a living entity.
function LuaEntity:heal() end

---Damages the entity by the given amount, if it's a living entity.
---@param amount number
function LuaEntity:damage(amount) end

---Instantly sets the entity's health to 0, if it's a living entity.
function LuaEntity:kill() end

---Returns the block's material name in lowercase.
---@return string @Block material name
function LuaBlock:getType() end

---Returns the block's type ID (legacy numeric ID).
---@return number @Legacy block ID
function LuaBlock:getTypeId() end

---Sets the block type using a material name.
---@param material string
function LuaBlock:setType(material) end

---Sets the block's legacy numeric ID.
---@param id number
function LuaBlock:setTypeId(id) end

---Sets the block's legacy data value (0-15).
---@param data number
function LuaBlock:setData(data) end

---Gets the block's legacy data value.
---@return number @Data value
function LuaBlock:getData() end

---Returns the block's position as a Vector3.
---@return Vector3 @Block position
function LuaBlock:getPosition() end

---Gets the block's X coordinate.
---@return number @X coordinate
function LuaBlock:getX() end

---Gets the block's Y coordinate.
---@return number @Y coordinate
function LuaBlock:getY() end

---Gets the block's Z coordinate.
---@return number @Z coordinate
function LuaBlock:getZ() end

---Returns true if the block is air.
---@return boolean @True if block is air
function LuaBlock:isEmpty() end

---Returns true if the block is a liquid.
---@return boolean @True if block is water or lava
function LuaBlock:isLiquid() end

---Returns the light level at this block.
---@return number @Light level from 0 to 15
function LuaBlock:getLightLevel() end

---Gets the block relative to this one in a given direction.
---@param face string
---@return LuaBlock @Block in the given direction
function LuaBlock:getRelative(face) end

---Checks if the specified face of this block is powered.
---@param face string
---@return boolean @True if that face is powered
function LuaBlock:isBlockFacePowered(face) end

---Returns true if the block is solid (can be stood on or blocks movement).
---@return boolean @True if block is solid
function LuaBlock:isSolid() end

---Returns the block's legacy numeric ID (alias of getTypeId).
---@return number @Legacy block ID
function LuaBlock:getId() end

